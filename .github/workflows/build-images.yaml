---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Image Build"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: registry.zoe/zcr.io

on:
  workflow_call:
    inputs:
      appsToBuild:
        required: false
        type: string
        default: ""
      channelsToBuild:
        required: false
        type: string
        default: ""
      pushImages:
        required: false
        default: false
        type: boolean
      sendNotifications:
        required: false
        default: false
        type: boolean
      force:
        required: false
        default: true
        type: boolean
        description: Force rebuild
    secrets:
      BOT_APP_ID:
        description: The App ID of the GitHub App
        required: true
      BOT_APP_PRIVATE_KEY:
        description: The private key of the GitHub App
        required: true
      REGISTRY_ZOE_USERNAME:
        description: The private key of the GitHub App
        required: true
      REGISTRY_ZOE_PASSWORD:
        description: The private key of the GitHub App
        required: true

jobs:
  prepare:
    name: Prepare to Build
    runs-on: gha-runner-scale-set-containers-verde
    outputs:
      matrices: ${{ steps.prepare-matrices.outputs.matrices }}
    steps:
      - name: Lowercase repository owner
        shell: bash
        run: echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          cache: pip

      - name: Install Python Requirements
        shell: bash
        run: pip install -r ./.github/scripts/requirements.txt && pip freeze

      - name: Prepare Matrices
        id: prepare-matrices
        env:
          TOKEN: ${{ steps.app-token.outputs.token }}
        shell: bash
        run: |
          if [[ -z "${{ inputs.appsToBuild }}" ]]; then
              matrices=$(python ./.github/scripts/prepare-matrices.py "all" "${{ inputs.pushImages }}" "${{ inputs.force }}")
          else
            if [[ -z "${{ inputs.channelsToBuild }}" ]]; then
              matrices=$(python ./.github/scripts/prepare-matrices.py "${{ inputs.appsToBuild }}" "${{ inputs.pushImages }}" "${{ inputs.force }}")
            else
              matrices=$(python ./.github/scripts/prepare-matrices.py "${{ inputs.appsToBuild }}" "${{ inputs.pushImages }}" "${{ inputs.force }}" "${{ inputs.channelsToBuild }}")
            fi
          fi
          echo "matrices=${matrices}" >> $GITHUB_OUTPUT
          echo "${matrices}"

  build-platform-images:
    name: Build/Test ${{ matrix.image.name }} (${{ matrix.image.platform }})
    needs: prepare
    runs-on: gha-runner-scale-set-containers-verde
    if: ${{ toJSON(fromJSON(needs.prepare.outputs.matrices).imagePlatforms) != '[]' && toJSON(fromJSON(needs.prepare.outputs.matrices).imagePlatforms) != '' }}
    strategy:
      fail-fast: false
      matrix:
        image:
          ["${{ fromJSON(needs.prepare.outputs.matrices).imagePlatforms }}"]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Lowercase repository owner
        shell: bash
        run: echo "LOWERCASE_REPO_OWNER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Log Matrix Input
        shell: bash
        run: |
          cat << EOF
          ${{ toJSON(matrix.image)}}
          EOF

      - name: Validate Matrix Input
        shell: bash
        run: |
          if [[ -z "${{ matrix.image.name }}" ]]; then
              echo "image.name is empty"
              exit 1
          fi
          if [[ -z "${{ matrix.image.version }}" ]]; then
              echo "image.version is empty"
              exit 1
          fi
          if [[ -z "${{ matrix.image.context }}" ]]; then
              echo "image.context is empty"
              exit 1
          fi
          if [[ -z "${{ matrix.image.dockerfile }}" ]]; then
              echo "image.dockerfile is empty"
              exit 1
          fi
          if [[ -z "${{ matrix.image.platform }}" ]]; then
              echo "image.platform is empty"
              exit 1
          fi
          if [[ -z "${{ matrix.image.tests_enabled }}" ]]; then
              echo "image.tests_enabled is empty"
              exit 1
          fi
          echo "${{ matrix.image.name }}" | grep -E "[a-zA-Z0-9_\.\-]+" || "Image Name is invalid"
          echo "${{ matrix.image.version }}" | grep -E "[a-zA-Z0-9_\.\-]+" || "Image Version is invalid"

      - name: Generate Token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            [registry."registry.zoe"]
              insecure = true

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_ZOE_USERNAME }}
          password: ${{ secrets.REGISTRY_ZOE_PASSWORD }}

      - name: Setup Goss
        if: ${{ matrix.image.tests_enabled }}
        uses: e1himself/goss-installation-action@v1
        with:
          version: latest

      - name: Prepare Build Outputs
        id: prepare-build-outputs
        shell: bash
        run: |
          if [[ "${{ inputs.pushImages }}" == "true" ]]; then
              image_name="${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.image.name }}"
              outputs="type=image,name=${image_name},push-by-digest=true,name-canonical=true,push=true"
          else
              image_name="${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.image.name }}:zztesting"
              outputs="type=docker,name=${image_name},push=false"
          fi
          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "outputs=${outputs}" >> $GITHUB_OUTPUT

      - name: Build Image
        uses: docker/build-push-action@v6
        id: build
        with:
          build-args: |-
            VERSION=${{ matrix.image.version }}
            REVISION=${{ github.sha }}
            CHANNEL=${{ matrix.image.channel }}
          # TODO: Use ${{ matrix.image.context }}, requires updates to all dockerfiles :-(
          context: .
          platforms: ${{ matrix.image.platform }}
          file: ${{ matrix.image.dockerfile }}
          outputs: ${{ steps.prepare-build-outputs.outputs.outputs }}
          cache-from: type=local,src=/cache
          cache-to: type=local,mode=max,dest=/cache
          labels: |-
            org.opencontainers.image.title=${{ matrix.image.name }}
            org.opencontainers.image.url=https://${{ env.REGISTRY }}/${{ env.LOWERCASE_REPO_OWNER }}/${{ matrix.image.name }}
            org.opencontainers.image.version=${{ matrix.image.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=${{ env.LOWERCASE_REPO_OWNER }}

      - name: Run Goss Tests
        id: dgoss
        if: ${{ matrix.image.tests_enabled }}
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ matrix.image.goss_config }}
          GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          GOSS_FILES_STRATEGY: cp
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        shell: bash
        run: |
          if [[ '${{ inputs.pushImages }}' == 'true' ]]; then
              image_name="${{ steps.prepare-build-outputs.outputs.image_name }}@${{ steps.build.outputs.digest }}"
          else
              image_name="${{ steps.prepare-build-outputs.outputs.image_name }}"
          fi
          dgoss run ${image_name} ${{ matrix.image.goss_args }}
